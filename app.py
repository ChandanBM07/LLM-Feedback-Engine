# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQCLL643lSMfvZRRsMiQc4ULeHpc5pHA
"""

# app.py
import io
import pandas as pd
import streamlit as st

st.set_page_config(page_title="üì± App Reviews Analyzer (Safe Mode)", layout="wide")
st.title("üì± App Reviews Analyzer (Safe Mode)")
st.caption("Load a CSV via Upload / URL / Server Path / Paste CSV text, map columns, then run analysis.")

# --------------------
# Helper: robust CSV reader
# --------------------
@st.cache_data(show_spinner=False)
def read_csv_robust(src, mode="upload"):
    """
    mode ‚àà {"upload","url","path","paste"}
    Returns (DataFrame, error_message)
    """
    try_orders = [
        dict(sep=None, engine="python", on_bad_lines="skip", encoding="utf-8"),
        dict(sep=",", engine="python", on_bad_lines="skip", encoding="utf-8"),
        dict(sep=None, engine="python", on_bad_lines="skip", encoding="latin-1"),
        dict(sep=",", engine="python", on_bad_lines="skip", encoding="latin-1"),
    ]

    for opts in try_orders:
        try:
            if mode == "upload":
                return pd.read_csv(src, **opts), ""
            elif mode == "url":
                return pd.read_csv(src, **opts), ""
            elif mode == "path":
                return pd.read_csv(src, **opts), ""
            elif mode == "paste":
                return pd.read_csv(io.StringIO(src), **opts), ""
        except Exception as e:
            last_err = str(e)
    return pd.DataFrame(), last_err

# --------------------
# 1) Load data
# --------------------
st.header("1) Load CSV")

tabs = st.tabs(["Upload", "URL", "Server path", "Paste CSV text"])
df, load_err = pd.DataFrame(), ""

with tabs[0]:
    up = st.file_uploader("Upload CSV", type=["csv"])
    if up:
        df, load_err = read_csv_robust(up, mode="upload")

with tabs[1]:
    url = st.text_input("Paste a CSV URL (GitHub Raw works best)", placeholder="https://raw.githubusercontent.com/USER/REPO/BRANCH/path/to/file.csv")
    if url:
        df, load_err = read_csv_robust(url, mode="url")

with tabs[2]:
    path = st.text_input("Server path (absolute or relative to app)", placeholder="data/my_file.csv")
    if path:
        df, load_err = read_csv_robust(path, mode="path")

with tabs[3]:
    pasted = st.text_area("Paste CSV text here", height=200, placeholder="col1,col2\nval1,val2\nval3,val4")
    if pasted.strip():
        df, load_err = read_csv_robust(pasted, mode="paste")

if load_err:
    st.error(f"Could not read CSV: {load_err}")

if df.empty:
    st.info("‚û°Ô∏è Load a CSV using any tab above. Nothing will run until a file is loaded.")
    st.stop()

st.success(f"‚úÖ Loaded {len(df):,} rows ¬∑ {len(df.columns)} columns")
with st.expander("Preview first 200 rows"):
    st.dataframe(df.head(200), use_container_width=True)

# --------------------
# 2) Map columns (flexible)
# --------------------
st.header("2) Map Columns")

cols = list(df.columns)

def guess(cands):
    lower = {str(c).strip().lower(): c for c in cols}
    for key in cands:
        if key in lower:
            return lower[key]
    return None

guess_app    = guess({"app_name","app","application","appname"})
guess_review = guess({"review","review_text","text","comment","body","content"})
guess_sent   = guess({"sentiment","sentiment_label","hybrid_sentiment_label"})
guess_rate   = guess({"rating","app_rating","stars","score"})
guess_topic  = guess({"topic","theme","label"})

c1, c2, c3 = st.columns(3)
with c1:
    app_col = st.selectbox("App Name (optional)", ["<none>"] + cols, index=(cols.index(guess_app)+1 if guess_app in cols else 0))
with c2:
    review_col = st.selectbox("Review Text (recommended)", ["<none>"] + cols, index=(cols.index(guess_review)+1 if guess_review in cols else 0))
with c3:
    sent_col = st.selectbox("Sentiment (optional)", ["<none>"] + cols, index=(cols.index(guess_sent)+1 if guess_sent in cols else 0))

c4, c5 = st.columns(2)
with c4:
    rating_col = st.selectbox("Rating (optional)", ["<none>"] + cols, index=(cols.index(guess_rate)+1 if guess_rate in cols else 0))
with c5:
    topic_col = st.selectbox("Topic/Theme (optional)", ["<none>"] + cols, index=(cols.index(guess_topic)+1 if guess_topic in cols else 0))

def pick(x): return None if x == "<none>" else x
app_col   = pick(app_col)
review_col= pick(review_col)
sent_col  = pick(sent_col)
rating_col= pick(rating_col)
topic_col = pick(topic_col)

if not review_col and not sent_col:
    st.error("Please map at least **Review Text** or **Sentiment**.")
    st.stop()

# Build normalized working frame
work = pd.DataFrame(index=df.index)
if app_col:    work["App_Name"] = df[app_col].astype(str)
if review_col: work["Review"]   = df[review_col].astype(str)
if sent_col:
    def norm_s(v):
        s = str(v).strip().lower()
        if "pos" in s: return "POSITIVE"
        if "neg" in s: return "NEGATIVE"
        if "neu" in s or s in {"0","neutral"}: return "NEUTRAL"
        return str(v)
    work["Sentiment"] = df[sent_col].apply(norm_s)
if rating_col:
    work["App_Rating"] = pd.to_numeric(df[rating_col], errors="coerce")
if topic_col:
    work["Topic"] = df[topic_col].astype(str)

# --------------------
# 3) Run analysis (on click)
# --------------------
st.header("3) Run Analysis")
go = st.button("‚ñ∂Ô∏è Run analysis")
if not go:
    st.info("Click **Run analysis** to generate charts and summaries.")
    st.stop()

# -- Summary cards
k1, k2, k3, k4 = st.columns(4)
with k1:
    st.metric("Rows", f"{len(work):,}")
with k2:
    st.metric("Apps", f"{work['App_Name'].nunique():,}" if "App_Name" in work else "‚Äî")
with k3:
    st.metric("Has Sentiment", "Yes" if "Sentiment" in work else "No")
with k4:
    st.metric("Has Topic", "Yes" if "Topic" in work else "No")

# -- Sentiment breakdown
st.subheader("Sentiment Breakdown")
if "Sentiment" in work:
    sent_counts = work["Sentiment"].value_counts().rename_axis("Sentiment").reset_index(name="Count")
    st.bar_chart(sent_counts.set_index("Sentiment"))
else:
    st.info("No sentiment column mapped ‚Äî sentiment chart skipped.")

# -- Top apps by volume
st.subheader("Top Apps by Review Volume")
if "App_Name" in work:
    top_apps = work["App_Name"].value_counts().head(10).rename_axis("App_Name").reset_index(name="Reviews")
    st.dataframe(top_apps, use_container_width=True)
else:
    st.info("No App_Name column mapped.")

# -- Topic distribution
st.subheader("Topic Distribution")
if "Topic" in work:
    topic_counts = work["Topic"].value_counts().head(20).rename_axis("Topic").reset_index(name="Count")
    st.bar_chart(topic_counts.set_index("Topic"))
else:
    st.info("No Topic column mapped.")

# -- Ratings histogram
st.subheader("Ratings Histogram")
if "App_Rating" in work and work["App_Rating"].notna().any():
    st.bar_chart(work["App_Rating"].dropna())
else:
    st.info("No numeric rating column mapped.")

# -- Data table
st.subheader("Filtered Dataset")
st.dataframe(work.reset_index(drop=True), use_container_width=True)