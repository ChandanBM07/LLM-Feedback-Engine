# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQCLL643lSMfvZRRsMiQc4ULeHpc5pHA
"""

# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

st.set_page_config(page_title="üì± App Reviews Dashboard", layout="wide")

# -------------------
# Data Loading
# -------------------
st.sidebar.header("üìä Load Your Data")

source = st.sidebar.radio("Choose how to load data:", ["Upload CSV", "GitHub Raw URL"])

df = None

if source == "Upload CSV":
    uploaded = st.sidebar.file_uploader("Upload a CSV file", type=["csv"])
    if uploaded:
        try:
            df = pd.read_csv(uploaded)
        except Exception as e:
            st.error(f"Could not read uploaded CSV: {e}")

elif source == "GitHub Raw URL":
    raw_url = st.sidebar.text_input(
        "Paste a GitHub Raw CSV URL",
        placeholder="https://raw.githubusercontent.com/username/repo/branch/path/to/file.csv"
    )
    if raw_url:
        try:
            df = pd.read_csv(raw_url)
        except Exception as e:
            st.error(f"Could not fetch CSV: {e}")

if df is None:
    st.info("‚û°Ô∏è Please upload a CSV or paste a GitHub Raw URL to continue.")
    st.stop()

st.success(f"‚úÖ Loaded {len(df):,} rows")

# -------------------
# Filters
# -------------------
app_list = sorted(df["App_Name"].dropna().unique()) if "App_Name" in df.columns else []
sentiments = sorted(df["Hybrid_Sentiment_Label"].dropna().unique()) if "Hybrid_Sentiment_Label" in df.columns else []
topics = sorted(df["Topic"].dropna().unique()) if "Topic" in df.columns else []

if app_list:
    selected_apps = st.sidebar.multiselect("Select App(s)", app_list, default=app_list[:5])
    df = df[df["App_Name"].isin(selected_apps)]

if sentiments:
    selected_sentiments = st.sidebar.multiselect("Select Sentiment(s)", sentiments, default=sentiments)
    df = df[df["Hybrid_Sentiment_Label"].isin(selected_sentiments)]

if topics:
    selected_topics = st.sidebar.multiselect("Select Topic(s)", topics, default=topics)
    if selected_topics:
        df = df[df["Topic"].isin(selected_topics)]

search_term = st.sidebar.text_input("üîç Search in Reviews")
if search_term:
    df = df[df["Review"].astype(str).str.contains(search_term, case=False, na=False)]

# -------------------
# Dashboard
# -------------------
st.title("üì± App Store Feedback Dashboard")

view = st.radio("Choose Visualization:", ["Sentiment Breakdown", "Topic Distribution", "Word Cloud"])

if view == "Sentiment Breakdown" and "Hybrid_Sentiment_Label" in df.columns:
    st.subheader("üìä Sentiment Breakdown (Top 5 Apps)")
    if "App_Name" in df.columns:
        top_apps = df["App_Name"].value_counts().head(5).index.tolist()
        subset = df[df["App_Name"].isin(top_apps)]

        plt.figure(figsize=(10, 5))
        sns.countplot(data=subset, x="App_Name", hue="Hybrid_Sentiment_Label", palette="coolwarm")
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
    else:
        st.warning("‚ö†Ô∏è 'App_Name' column not found.")

elif view == "Topic Distribution":
    st.subheader("üß† Topic Distribution")
    if "Topic" in df.columns:
        topic_counts = df["Topic"].value_counts()
        st.bar_chart(topic_counts)
    else:
        st.warning("‚ö†Ô∏è No 'Topic' column found in dataset.")

elif view == "Word Cloud":
    st.subheader("‚òÅÔ∏è Word Cloud of Reviews")
    if "Review" in df.columns:
        all_text = " ".join(df["Review"].dropna().astype(str))
        if all_text.strip():
            wordcloud = WordCloud(width=1000, height=400, background_color="white").generate(all_text)
            plt.figure(figsize=(12, 6))
            plt.imshow(wordcloud, interpolation="bilinear")
            plt.axis("off")
            st.pyplot(plt.gcf())
        else:
            st.warning("‚ö†Ô∏è No text available for Word Cloud.")
    else:
        st.warning("‚ö†Ô∏è 'Review' column not found.")

# -------------------
# Data Table
# -------------------
with st.expander("üóÇ View Filtered Data"):
    st.dataframe(df.reset_index(drop=True))