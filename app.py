# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQCLL643lSMfvZRRsMiQc4ULeHpc5pHA
"""

# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

st.set_page_config(page_title="üì± App Reviews Dashboard", layout="wide")

# -------------------
# Data Loading
# -------------------
st.sidebar.header("üìä Data Source")

source = st.sidebar.radio("Load data from:", ["Repo file", "GitHub Raw URL", "Upload CSV"])

df = None

if source == "Repo file":
    default_path = "outputs/hybrid_sentiment_reviews.csv"  # make sure this is committed
    path = st.sidebar.text_input("Repo-relative path", value=default_path)
    try:
        df = pd.read_csv(path)
    except Exception as e:
        st.error(f"Could not read {path}: {e}")

elif source == "GitHub Raw URL":
    raw_url = st.sidebar.text_input(
        "Paste a GitHub Raw CSV URL",
        value="https://raw.githubusercontent.com/<user>/<repo>/<branch>/outputs/hybrid_sentiment_reviews.csv"
    )
    if raw_url:
        try:
            df = pd.read_csv(raw_url)
        except Exception as e:
            st.error(f"Could not fetch CSV: {e}")

else:  # Upload
    up = st.sidebar.file_uploader("Upload a CSV", type=["csv"])
    if up:
        try:
            df = pd.read_csv(up)
        except Exception as e:
            st.error(f"Could not read uploaded CSV: {e}")

if df is None:
    st.info("‚û°Ô∏è Load a CSV from the sidebar to begin.")
    st.stop()

st.success(f"Loaded {len(df):,} rows")

# -------------------
# Filters
# -------------------
app_list = sorted(df["App_Name"].dropna().unique())
sentiments = sorted(df["Hybrid_Sentiment_Label"].dropna().unique())
topics = sorted(df["Topic"].dropna().unique()) if "Topic" in df.columns else []

selected_apps = st.sidebar.multiselect("Select App(s)", app_list, default=app_list[:5])
selected_sentiments = st.sidebar.multiselect("Select Sentiment(s)", sentiments, default=sentiments)
if topics:
    selected_topics = st.sidebar.multiselect("Select Topic(s)", topics, default=topics)
else:
    selected_topics = []

search_term = st.sidebar.text_input("üîç Search in Reviews")

filtered_df = df[df["App_Name"].isin(selected_apps) & df["Hybrid_Sentiment_Label"].isin(selected_sentiments)]
if topics and selected_topics:
    filtered_df = filtered_df[filtered_df["Topic"].isin(selected_topics)]
if search_term:
    filtered_df = filtered_df[filtered_df["Review"].str.contains(search_term, case=False, na=False)]

# -------------------
# Dashboard
# -------------------
st.title("üì± App Store Feedback Dashboard")

view = st.radio("Choose Visualization:", ["Sentiment Breakdown", "Topic Distribution", "Word Cloud"])

if view == "Sentiment Breakdown":
    st.subheader("üìä Sentiment Breakdown (Top 5 Apps)")
    top_apps = filtered_df["App_Name"].value_counts().head(5).index.tolist()
    subset = filtered_df[filtered_df["App_Name"].isin(top_apps)]

    plt.figure(figsize=(10, 5))
    sns.countplot(data=subset, x="App_Name", hue="Hybrid_Sentiment_Label", palette="coolwarm")
    plt.xticks(rotation=45)
    st.pyplot(plt.gcf())

elif view == "Topic Distribution":
    st.subheader("üß† Topic Distribution")
    if "Topic" in filtered_df.columns:
        topic_counts = filtered_df["Topic"].value_counts()
        st.bar_chart(topic_counts)
    else:
        st.warning("‚ö†Ô∏è No 'Topic' column found in dataset.")

else:  # Word Cloud
    st.subheader("‚òÅÔ∏è Word Cloud of Reviews")
    all_text = " ".join(filtered_df["Review"].dropna().astype(str))
    if all_text.strip():
        wordcloud = WordCloud(width=1000, height=400, background_color="white").generate(all_text)
        plt.figure(figsize=(12, 6))
        plt.imshow(wordcloud, interpolation="bilinear")
        plt.axis("off")
        st.pyplot(plt.gcf())
    else:
        st.warning("‚ö†Ô∏è No text available for Word Cloud.")

# -------------------
# Data Table
# -------------------
with st.expander("üóÇ View Filtered Data"):
    st.dataframe(filtered_df.reset_index(drop=True))